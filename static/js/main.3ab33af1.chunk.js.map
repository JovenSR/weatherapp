{"version":3,"sources":["components/Form.js","components/Search.js","components/Display.js","components/ErrorMsg.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","newCity","handleChange","handleSubmit","className","onSubmit","id","type","name","value","onChange","placeholder","Search","currentCity","setCurrentCity","setNewCity","composeData","useEffect","event","target","preventDefault","Display","temperatureInfo","weatherInfo","humidity","wind","icon","toUpperCase","split","src","alt","ErrorMsg","Main","useState","setTemperatureInfo","setWeatherInfo","setHumidity","setWind","setIcon","errorLoad","setErrorLoad","url","getData","a","fetch","mode","response","json","weatherData","console","log","data","main","temp","weather","description","speed","loadComponent","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3ab33af1.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nfunction Form(props) {\r\n\tconst { newCity, handleChange, handleSubmit} = props\r\n\t\r\n\treturn (\r\n\t\t<form className=\"form\" onSubmit={handleSubmit}>\r\n\t\t\t<div id=\"searchBar\">\r\n\t\t\t\t<input \r\n\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\tname=\"city\"\r\n\t\t\t\t\tvalue={newCity}\r\n\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t\tplaceholder=\"Enter City\"\r\n\t\t\t\t/>\r\n\t\t\t\t<button id=\"formsubmit\">Search</button>\r\n\t\t\t</div>\r\n\t\t</form> \r\n\t)\r\n}\r\n\r\nexport default Form","import React, { useEffect } from \"react\"\r\nimport Form from \"./Form\"\r\n\r\nfunction Search(props) {\r\n\r\n\tconst { currentCity, newCity, setCurrentCity, setNewCity, composeData } = props\r\n\r\n\tuseEffect(() => {\r\n\t\tcomposeData()\t\r\n\t}, [currentCity]\r\n\t)\r\n\t\r\n\tfunction handleChange(event) {\r\n\t\tconst { value } = event.target\r\n\t\tsetNewCity(value)\r\n\t}\r\n\r\n\tfunction handleSubmit(event) {\r\n\t\tevent.preventDefault()\r\n\t\tsetCurrentCity(newCity)\r\n\t\tsetNewCity(\"\")\r\n\t}\r\n\t\r\n\treturn (\r\n\t\t<Form newCity={newCity} handleChange={handleChange} handleSubmit={handleSubmit}/>\r\n\t)\r\n}\r\n\r\nexport default Search","import React from \"react\"\r\n\r\nfunction Display(props) {\r\n\tconst { temperatureInfo, weatherInfo, currentCity, humidity, wind, icon } = props\r\n\t\r\n\treturn (\r\n\t\t<div className=\"display\">\r\n\t\t\t<div className=\"title\">\r\n\t\t\t\t<h1 id=\"city\">{currentCity.toUpperCase().split(\",\")[0]}</h1>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"climate\">\r\n\t\t\t\t<img id=\"img\" src={icon} alt=\"\" />\r\n\t\t\t\t<h3 id=\"temp\">{temperatureInfo} &#8451;</h3>\r\n\t\t\t\t<p id=\"info\">{weatherInfo.toUpperCase()}</p>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"extra\">\r\n\t\t\t\t<p id=\"humid\">Humidity: {humidity}%</p>\r\n\t\t\t\t<p id=\"wind\">Wind: {wind} km/h</p>\r\n\t\t\t</div>\t\r\n\t\t\t\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Display","import React from \"react\"\r\n\r\nfunction ErrorMsg() {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<h1>Cant Find City</h1>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default ErrorMsg","import React, { useState } from \"react\"\r\nimport Search from \"./Search\"\r\nimport Display from \"./Display\"\r\nimport ErrorMsg from \"./ErrorMsg\"\r\n\r\nfunction Main() {\r\n\tconst [currentCity, setCurrentCity] = useState(\"Vancouver\")\r\n\r\n\tconst [newCity, setNewCity] = useState(\"\")\r\n\t\r\n\tconst [temperatureInfo, setTemperatureInfo] = useState(\"\")\r\n\r\n\tconst [weatherInfo, setWeatherInfo] = useState(\"\")\r\n\r\n\tconst [humidity, setHumidity] = useState(\"\")\r\n\r\n\tconst [wind, setWind] = useState(\"\")\r\n\r\n\tconst [icon, setIcon] = useState(\"\")\r\n\r\n\tconst [errorLoad, setErrorLoad] = useState(false)\r\n\t\r\n\tconst url = \"http://api.openweathermap.org/data/2.5/weather?q=\" + currentCity + \"&units=metric&APPID=e56d7df09eb193bb870fae23a23c925b\"\r\n\r\n\tasync function getData(url) {\r\n\t\ttry {\r\n\t\t\tconst response = await fetch(url, {mode: \"cors\"})\r\n\t\t\tconst weatherData = await response.json()\r\n\t\t\treturn weatherData\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log(error)\r\n\t\t}\t\r\n\t}\r\n\t\r\n\tasync function composeData() {\r\n\t\ttry {\r\n\t\t\tconst data = await getData(url)\r\n\t\t\tsetTemperatureInfo(data.main.temp)\r\n\t\t\tsetWeatherInfo(data.weather[0].description)\r\n\t\t\tsetHumidity(data.main.humidity)\r\n\t\t\tsetWind(data.wind.speed)\r\n\t\t\tsetIcon(\"http://openweathermap.org/img/wn/\" + data.weather[0].icon + \"@2x.png\")\r\n\t\t\tsetErrorLoad(false)\r\n\t\t} catch (error) {\r\n\t\t\tsetErrorLoad(true)\r\n\t\t}\r\n\t}\r\n\r\n\tconst loadComponent = errorLoad ? <ErrorMsg /> : <Display temperatureInfo={temperatureInfo} weatherInfo={weatherInfo} currentCity={currentCity} humidity={humidity} wind={wind} icon={icon}/>\r\n\r\n\treturn (\r\n\t\t<div className=\"main\">\r\n\t\t\t<Search currentCity={currentCity} newCity={newCity} setCurrentCity={setCurrentCity} setNewCity={setNewCity} composeData={composeData} />\r\n\t\t\t{loadComponent}\r\n\t\t</div>\r\n\t)\t\r\n}\r\n\r\nexport default Main","import React from 'react';\nimport Main from \"./components/Main\"\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}